using System;
using System.IO;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using Replayer.Model;

namespace Replayer.WinForms.Ui.Gui {
    /// <summary>
    /// Wizard to create a new compilation.
    /// </summary>
    /// <seealso cref="DevExpress.XtraEditors.XtraForm" />
    public partial class CreateNewCompilationWizard : XtraForm {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateNewCompilationWizard"/> class.
        /// </summary>
        public CreateNewCompilationWizard() {
            InitializeComponent();
            wizardControl1.FinishButtonClick += WizardControl1_FinishButtonClick;
            wizardControl1.CurrentStepIndexChanged += WizardControl1_CurrentStepIndexChanged;
            InitializeCurrentStep();
        }

        /// <summary>
        /// Handles the CurrentStepIndexChanged event of the WizardControl1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void WizardControl1_CurrentStepIndexChanged(object sender, EventArgs e) {
            InitializeCurrentStep();
        }

        /// <summary>
        /// Initializes the current step.
        /// </summary>
        private void InitializeCurrentStep() {
            if (wizardControl1.CurrentStepIndex == 0 /* Intro */) {
                //Easy move to next step with enter button
                wizardControl1.NextButtonControl.Focus();
                this.AcceptButton = wizardControl1.NextButtonControl;
            }
            else if (wizardControl1.CurrentStepIndex == 1 /*Collection properties*/) {
                //Set focus on first input
                _tbCollectionName.Focus();
            }
            else if (wizardControl1.CurrentStepIndex == 2 /*select media files*/) {
                //Set focus on open files button
                _btnBrowserForTracks.Focus();
            }
        }

        /// <summary>
        /// Handles the FinishButtonClick event of the wizardControl1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void WizardControl1_FinishButtonClick(object sender, EventArgs e) {
            //generate the compilation with the tracks.
            ICompilation compilation = CompilationFactory.CreateNew();
            compilation.Title = _tbCollectionName.Text;

            //create tracks
            foreach (string trackMediaFile in _tbTrackMediaFiles.Lines) {
                Track newTrack = new Track {
                    Album = _tbCommonAlbum.Text,
                    Artist = _tbCommonArtist.Text,
                    Name = Path.GetFileNameWithoutExtension(trackMediaFile),
                    Url = trackMediaFile
                };
                //create initial cue
                newTrack.Cues.Add(
                    new Cue {
                        Description = "Intro (autogenerated)",
                        Shortcut = "1",
                        Time = 0
                    });
                compilation.Tracks.Add(newTrack);
            }

            Core.Model.Instance.Compilation = compilation; //assign to model.
            DialogResult = DialogResult.OK;
            Close();
        }

        /// <summary>
        /// Handles the Click event of the _btnBrowserForTracks control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void _btnBrowserForTracks_Click(object sender, EventArgs e) {
            OpenTrackFileDialog otfd = new OpenTrackFileDialog();
            if (otfd.ShowDialog(true) == DialogResult.OK) //pressed ok by the user?
            {
                _tbTrackMediaFiles.Lines = otfd.FileNames;
            }
        }

        /// <summary>
        /// Handles the CancelButtonClick event of the wizardControl1 control.
        /// </summary>
        /// <param name="sender">The source of the event.</param>
        /// <param name="e">The <see cref="EventArgs"/> instance containing the event data.</param>
        private void WizardControl1_CancelButtonClick(object sender, EventArgs e) {
            DialogResult = DialogResult.Cancel;
            Close();
        }
    }
}